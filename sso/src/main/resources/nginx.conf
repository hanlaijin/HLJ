user                  mi;
worker_processes      8;  #nginx进程数,通常与物理CPU核心数数量相等
worker_cpu_affinity   auto;  #nginx默认是没有开启利用多核cpu的配置,auto表示允许将工作进程自动绑定到可用的CPU
#worker_rlimit_nofile 65535;  #指定每个进程可以打开的最大描述符
                              #理论值应该是最多打开文件数(ulimit -n)与nginx进程数相除,
                              #但是nginx分配请求并不是那么均匀,所以最好与ulimit -n 的值保持一致
pid                   logs/nginx.pid;

events {
    use  epoll;  #epoll是多路复用io,可提高nginx性能
    worker_connections  20480;  #单个work_processes进程的最大并发连接数
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    server_tokens off;  #隐藏nginx版本

    log_format main '$time_local\t'             #访问时间
                    '$server_addr\t'            #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中
                    '$remote_addr\t'            #客户端地址
                    '$request_uri\t'            #请求内容
                    '$request_length\t'         #请求长度
                    '$upstream_addr\t'          #后台服务器地址
                    '$bytes_sent\t'             #传输给客户端的字节数
                    '$upstream_response_time\t' #后台服务器响应时间
                    '$status\t'                 #HTTP请求状态码
                    '$request_time\t'           #整个请求总时间
                    '$http_referer\t'           #url跳转来源,用来记录从那个页面链接访问过来的
                    '$http_user_agent\t';

    access_log logs/access.log;
    error_log  logs/error.log;

    sendfile        on;  #让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据
                         #如果这个参数不开启,会先在用户空间(Nginx进程空间)申请一个buffer,
                         #用read函数把数据从磁盘读到cache,再从cache读取到用户空间的buffer,
                         #再用write函数把数据从用户空间的buffer写入到内核的buffer,最后到tcp socket
    keepalive_timeout  65;  #nginx client与nginx间http连接超时时间

    client_max_body_size 120m;
    server_names_hash_bucket_size 128;  #nginx配置虚拟主机多域名时需要配置
                                        #保存服务器名字的hash表是由指令server_names_hash_max_size和server_names_hash_bucket_size所控制的
                                        #参数hash bucket size总是等于hash表的大小,并且是一路处理器缓存大小的倍数

    proxy_headers_hash_max_size    8192;  #设置头部哈希表的最大值，不能小于你后端服务器设置的头部总数
    proxy_headers_hash_bucket_size 128;

    proxy_connect_timeout      10;   #默认值60s,nginx连接到后端服务器的连接超时时间,必须小于75s
    proxy_timeout              10m;  #默认值为10分钟,nginx接收后端服务器的响应超时时间
    proxy_read_timeout         120;  #默认值60s,nginx接收upstream server数据超时时间,这个时间不是获得整个response的时间,而是两次读操作的时间
    proxy_send_timeout         120;  #默认值60s,nginx发送数据至upstream server超时时间,这个时间不是获得整个request的时间,而是两次写操作的时间
    proxy_buffer_size          16k;
    proxy_buffers              4 64k;
    proxy_busy_buffers_size    128k;
    proxy_temp_file_write_size 128k;

    gzip              on;
    gzip_proxied      expired no-cache no-store private auth;
    gzip_http_version 1.1;
    gzip_types        application/json application/x-json text/plain application/x-javascript
                      text/css text/javascript application/xml text/xml application/javascript;

    upstream  api_upstream {
        #fail_timeout内失败max_fails次后,认为该服务器不可用,之后每隔fail_timeout后尝次一次,直到可用
        server localhost:8081  max_fails=2 fail_timeout=30s;
        server localhost:8082  max_fails=2 fail_timeout=30s;
        keepalive 32;  #每个Worker进程与上游服务器可缓存的空闲连接的最大数量,超出的lru算法关闭
    }

    server {
        listen      80;
        server_name localhost;
        access_log  logs/api.access.log;
        error_log   logs/api.error.log;

        location ~ ^/resources {
            proxy_pass         http://api_upstream;
            proxy_cache       off;
            proxy_cache_methods GET POST;
            proxy_cache_key $request_uri;
            proxy_cache_valid 200 5s;
            proxy_http_version 1.1;
            proxy_redirect     off;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            client_max_body_size       10m;
        }
        location / {
            proxy_pass         http://api_upstream;  #若url以/结尾,表示绝对根路径;否则表示相对路径,把匹配的路径部分也给代理走
            #如果想与上游服务器建立长连接,需要配置proxy_http_version 1.1和proxy_set_header Connection ""
            proxy_http_version 1.1;  #默认是1.0不支持HTTP keep-alive
            proxy_set_header Connection "";  #防止client显式设置close
            proxy_redirect     off;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Real-Port      $remote_port;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            client_max_body_size       10m;
        }
    }
}
